<?php

declare(strict_types=1);

namespace FppTest;

use Fpp\Argument;
use Fpp\Definition;
use Fpp\DefinitionCollection;
use Fpp\DefinitionCollectionDumper;
use Fpp\Deriving\Equals;
use Fpp\Dumper\Dumper;
use Fpp\Type\Data;
use PHPUnit\Framework\TestCase;

class DefinitionCollectionDumperTest extends TestCase
{
    /**
     * @test
     */
    public function it_dumps_data(): void
    {
        $arguments = [
            new Argument('', 'name', 'string', false),
            new Argument('', 'age', 'int', false),
        ];
        $derivings = [new Equals()];
        $definition = new Definition(new Data(), 'Foo\Bar', 'Person', $arguments, $derivings);
        $collection = new DefinitionCollection();
        $collection->addDefinition($definition);

        $nullDumper = $this->nullDumper();

        $dumper = new DefinitionCollectionDumper([
            'AggregateChanged' => $nullDumper,
            'Data' => $nullDumper,
            'Enum' => $nullDumper,
            'Command' => $nullDumper,
            'DomainEvent' => $nullDumper,
            'Query' => $nullDumper,
            'Uuid' => $nullDumper,
        ]);
        $code = $dumper->dump($collection);

        $expected = <<<CODE
<?php
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

CODE;

        $this->assertSame($expected, $code);
    }

    /**
     * @test
     */
    public function it_throws_exception_when_unknown_dumper_name_given(): void
    {
        $this->expectException(\InvalidArgumentException::class);

        new DefinitionCollectionDumper([
            'foo' => $this->nullDumper(),
        ]);
    }

    /**
     * @test
     */
    public function it_throws_exception_when_invalid_dumper_given(): void
    {
        $this->expectException(\InvalidArgumentException::class);

        new DefinitionCollectionDumper([
            'Data' => 'invalid',
        ]);
    }

    /**
     * @test
     */
    public function it_throws_exception_when_dumper_is_missing(): void
    {
        $this->expectException(\RuntimeException::class);

        $arguments = [
            new Argument('', 'name', 'string', false),
            new Argument('', 'age', 'int', false),
        ];
        $derivings = [new Equals()];
        $definition = new Definition(new Data(), 'Foo\Bar', 'Person', $arguments, $derivings);
        $collection = new DefinitionCollection();
        $collection->addDefinition($definition);

        $dumper = new DefinitionCollectionDumper([
            'Enum' => $this->nullDumper(),
        ]);

        $dumper->dump($collection);
    }

    private function nullDumper(): Dumper
    {
        return new class() implements Dumper {
            public function dump(Definition $definition): string
            {
                return '';
            }
        };
    }
}
