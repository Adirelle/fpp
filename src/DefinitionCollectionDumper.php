<?php

declare(strict_types=1);

namespace Fpp;

use Fpp\Dumper\Dumper;

class DefinitionCollectionDumper
{
    /**
     * @var array
     */
    private $dumpers = [];

    public function __construct(array $dumpers)
    {
        foreach ($dumpers as $name => $dumper) {
            if (! in_array($name, Type::OPTION_VALUES)) {
                throw new \InvalidArgumentException('Dumpers name must be a Type name');
            }
            if (! $dumper instanceof Dumper) {
                throw new \InvalidArgumentException('Dumper must be an instance of ' . Dumper::class);
            }
            $this->dumpers[$name] = $dumper;
        }
    }

    private function getDumper(string $name): Dumper
    {
        if (! isset($this->dumpers[$name])) {
            throw new \RuntimeException('No dumper found for \'' . $name . '\'');
        }

        return $this->dumpers[$name];
    }

    public function dump(DefinitionCollection $collection): string
    {
        $code = <<<CODE
<?php
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);


CODE;
        foreach ($collection->definitions() as $definition) {
            $dumper = $this->getDumper((string) $definition->type());
            $code .= $dumper->dump($definition);
        }

        return substr($code, 0, -1);
    }
}
