<?php
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace Model\Foo {
    final class Person
    {
        private $name;
        private $age;

        public function __construct(string $name, ?int $age)
        {
            $this->name = $name;
            $this->age = $age;
        }
    
        public function toArray(): array
        {
            return [
                'name' => $this->name,
                'age' => $this->age,
            ];
        }

        public static function fromArray(array $data): Person
        {
            if (!isset($data['name'])) {
                throw new \InvalidArgumentException(
                    'Key name is missing in $data'
                );
            }
    
            if (!isset($data['age'])) {
                throw new \InvalidArgumentException(
                    'Key age is missing in $data'
                );
            }
    
            return new Person($data['name'], $data['age']);
        }
    
        public function sameAs(\Model\Foo\Person $other): bool
        {
            return $this->name === $other->name
                && $this->age === $other->age;
        }
    }
}

namespace Model\Foo\Person {
    const Person = '\Model\Foo\Person';

    function Person(string $name, ?int $age): \Model\Foo\Person {
        return new \Model\Foo\Person($name, $age);
    }

    const name = '\Model\Foo\Person\name';

    function name(\Model\Foo\Person $person): string {
        $f = \Closure::bind(
            function (\Model\Foo\Person $person): string {
                return $person->name;
            },
            null,
            $person
        );
    
        return $f($person);
    }
    
    const age = '\Model\Foo\Person\age';

    function age(\Model\Foo\Person $person): ?int {
        $f = \Closure::bind(
            function (\Model\Foo\Person $person): ?int {
                return $person->age;
            },
            null,
            $person
        );
    
        return $f($person);
    }
    
    const setName = '\Model\Foo\Person\setName';

    function setName(\Model\Foo\Person $person, string $name): \Model\Foo\Person {
        $f = \Closure::bind(
            function (\Model\Foo\Person $person, $value) {
                return $person->{$value};
            },
            null,
            $person
        );
    
        return new \Model\Foo\Person($name, $f($person, 'age'));
    }

    const setAge = '\Model\Foo\Person\setAge';

    function setAge(\Model\Foo\Person $person, ?int $age): \Model\Foo\Person {
        $f = \Closure::bind(
            function (\Model\Foo\Person $person, $value) {
                return $person->{$value};
            },
            null,
            $person
        );
    
        return new \Model\Foo\Person($f($person, 'name'), $age);
    }
}

namespace Model\Foo {
    final class Length
    {
        private $l;

        public function __construct(int $l)
        {
            $this->l = $l;
        }
    }
}

namespace Model\Foo\Length {
    const Length = '\Model\Foo\Length';

    function Length(int $l): \Model\Foo\Length {
        return new \Model\Foo\Length($l);
    }

    const l = '\Model\Foo\Length\l';

    function l(\Model\Foo\Length $length): int {
        $f = \Closure::bind(
            function (\Model\Foo\Length $length): int {
                return $length->l;
            },
            null,
            $length
        );
    
        return $f($length);
    }
    
    const setL = '\Model\Foo\Length\setL';

    function setL(\Model\Foo\Length $length, int $l): \Model\Foo\Length {
        $f = \Closure::bind(
            function (\Model\Foo\Length $length, $value) {
                return $length->{$value};
            },
            null,
            $length
        );
    
        return new \Model\Foo\Length($l);
    }
}

namespace Model\Foo {
    final class Red
    {
        public function __construct()
        {
        }
    }
}

namespace Model\Foo\Red {
    const Red = '\Model\Foo\Red';

    function Red(): \Model\Foo\Red {
        return new \Model\Foo\Red();
    }
}

namespace Model\Foo\Command {
    final class RegisterUser extends \Prooph\Common\Messaging\Command implements \Prooph\Common\Messaging\PayloadConstructable
    {
        use \Prooph\Common\Messaging\PayloadTrait;

        protected $messageName = 'register-user';

        public function __construct(string $name, string $email)
        {
            parent::__construct([
                'name' => $name,
                'email' => $email,
            ]);
        }

        public function name(): string
        {
            return $this->payload['name'];
        }

        public function email(): string
        {
            return $this->payload['email'];
        }
    }
}

namespace Model\Foo\Command\RegisterUser {
    const RegisterUser = '\Model\Foo\Command\RegisterUser';

    function RegisterUser(string $name, string $email): \Model\Foo\Command\RegisterUser {
        return new \Model\Foo\Command\RegisterUser($name, $email);
    }
}

